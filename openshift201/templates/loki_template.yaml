apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: loki-template
message: >-
  The following service(s) have been created in your project:
  ${LOKI_SERVICE_NAME}.

  For more information about using this template, including OpenShift
  considerations, contact the rocketchat community.
metadata:
  annotations:
    description: >-
      Loki Template for use in OpenShift 201 lab. 

      WARNING: Any configuration stored will be lost upon pod destruction.
      ConfigMaps should be used for codified configuration. 
    iconClass: icon-other-unknown
    openshift.io/display-name: loki-openshift201
    openshift.io/documentation-url: 'https://github.com/bcdevops/devops-platform-workshops'
    openshift.io/long-description: This template provides a sample Loki configuration for lab purposes.
    openshift.io/provider-display-name: BCDevOps
    openshift.io/support-url: 'https://github.com/bcdevops/'
    tags: 'monitoring,loki'
  name: loki-template
objects:
  - apiVersion: v1
    kind: Service
    spec:
      ports:
        - name: http-metrics
          port: 3100
          protocol: TCP
          targetPort: http-metrics
      selector:
        app: loki
        release: '${LOKI_SERVICE_NAME}'
      sessionAffinity: None
      type: ClusterIP
    metadata:
      annotations:
      labels:
        app: loki
        chart: loki-0.8.4
        heritage: Tiller
        release: '${LOKI_SERVICE_NAME}'
      name: '${LOKI_SERVICE_NAME}'
  - apiVersion: apps/v1
    kind: Deployment
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: loki
          release: '${LOKI_SERVICE_NAME}'
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          annotations:
            checksum/config: 8a9c801aec546363faba27a5edec404bf1e5781bf40f8e5badbeeaf11f23e5d9
            prometheus.io/port: http-metrics
            prometheus.io/scrape: 'true'
          creationTimestamp: null
          labels:
            app: loki
            name: loki
            release: '${LOKI_SERVICE_NAME}'
        spec:
          affinity: {}
          containers:
            - args:
                - '-config.file=/etc/loki/loki.yaml'
              env:
                - name: JAEGER_AGENT_HOST
              image: 'grafana/loki:latest'
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /ready
                  port: http-metrics
                  scheme: HTTP
                initialDelaySeconds: 45
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              name: loki
              ports:
                - containerPort: 3100
                  name: http-metrics
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /ready
                  port: http-metrics
                  scheme: HTTP
                initialDelaySeconds: 45
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              resources: {}
              securityContext:
                readOnlyRootFilesystem: true
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/loki
                  name: config
                - mountPath: /data
                  name: storage
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            runAsNonRoot: true
          serviceAccount: default
          serviceAccountName: default
          terminationGracePeriodSeconds: 30
          volumes:
            - name: config
              secret:
                defaultMode: 420
                secretName: '${LOKI_SERVICE_NAME}'
            - emptyDir: {}
              name: storage
    metadata:
      annotations:
        deployment.kubernetes.io/revision: '6'
      generation: 6
      labels:
        app: loki
        chart: loki-0.8.4
        heritage: Tiller
        release: '${LOKI_SERVICE_NAME}'
      name: '${LOKI_SERVICE_NAME}'
  - apiVersion: route.openshift.io/v1
    kind: Route
    spec:
      host: '${LOKI_SERVICE_NAME}-${NAMESPACE}.${ROUTE_SUBDOMAIN}'
      port:
        targetPort: http-metrics
      to:
        kind: Service
        name: '${LOKI_SERVICE_NAME}'
        weight: 100
      wildcardPolicy: None
    metadata:
      annotations:
        openshift.io/host.generated: 'true'
      labels:
        app: loki
        chart: loki-0.8.4
        heritage: Tiller
        release: '${LOKI_SERVICE_NAME}'
      name: '${LOKI_SERVICE_NAME}'
parameters:
  - description: The namespace this templated is deployed into.
    displayName: Namespace
    name: NAMESPACE
    value: openshift
  - description: The name of the Loki service to connect to.
    displayName: Loki Service Name
    name: LOKI_SERVICE_NAME
    required: true
    value: loki
  - description: Default route subdomain
    displayName: Route subdomain
    name: ROUTE_SUBDOMAIN
    required: true
    value: pathfinder.gov.bc.ca

