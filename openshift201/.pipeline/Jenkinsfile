#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "s4g19x-dkelsey-openshift201-may2019-tools"
def DEV_NAMESPACE = "s4g19x-dkelsey-openshift201-may2019-dev"
def PROD_NAMESPACE = "s4g19x-dkelsey-openshift201-may2019-prod"
def LOKI_SERVICE  = "loki"
def PROMETHEUS_SERVICE  = "prometheus"
def PROMETHEUS_PVC_SIZE  = "2Gi"
def GRAFANA_SERVICE  = "grafana"
def ROUTE_SUBDOMAIN  = "pathfinder.gov.bc.ca"


//Pipeline
node {

      stage ('Deploy to Dev'){
            parallel (
               'Deploy Loki to Dev':{

                   dir ('loki_pipeline') {
                       checkout scm
                       sh "oc process -f openshift201/templates/loki_template.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} | oc apply -f - -n ${DEV_NAMESPACE}"

                          sh "echo Wait for service to be up"
                       timeout (time: 180, unit: 'SECONDS'){
                           openshift.withCluster() {
                           openshift.withProject("${DEV_NAMESPACE}") {
                               def dc = openshift.selector('deployment', "${LOKI_SERVICE}")
                               // this will wait until the desired replicas are available
                               dc.rollout().status()
                           }
                           }
                         }
                   }
               },
               'Deploy Prometheus to Dev':{

                   dir ('prometheus_pipeline') {
                       checkout scm
                       sh "oc process -f openshift201/templates/prometheus_template.yaml -p  PROMETHEUS_SERVICE_NAME=${PROMETHEUS_SERVICE} -p PROMETHEUS_PVC_SIZE=${PROMETHEUS_PVC_SIZE} -p NAMESPACE=${DEV_NAMESPACE} | oc apply -f - -n ${DEV_NAMESPACE}"

                          sh "echo Wait for service to be up"
                       timeout (time: 180, unit: 'SECONDS'){
                           openshift.withCluster() {
                           openshift.withProject("${DEV_NAMESPACE}") {
                               def dc = openshift.selector('deployment', "${PROMETHEUS_SERVICE}")
                               // this will wait until the desired replicas are available
                               dc.rollout().status()
                           }
                           }
                         }
                   }
               },
               'Deploy Grafana to Dev':{

                   dir ('grafana_pipeline') {
                       checkout scm
                       sh "oc process -f openshift201/templates/grafana_template.yaml -p  GRAFANA_SERVICE_NAME=${GRAFANA_SERVICE} -p LOKI_SERVICE_NAME=${LOKI_SERVICE} -p  PROMETHEUS_SERVICE_NAME=${PROMETHEUS_SERVICE} -p ROUTE_SUBDOMAIN=${ROUTE_SUBDOMAIN} -p NAMESPACE=${DEV_NAMESPACE} | oc apply -f - -n ${DEV_NAMESPACE}"

                          sh "echo Wait for service to be up"
                       timeout (time: 180, unit: 'SECONDS'){
                           openshift.withCluster() {
                           openshift.withProject("${DEV_NAMESPACE}") {
                               def dc = openshift.selector('dc', "${GRAFANA_SERVICE}")
                               // this will wait until the desired replicas are available
                               dc.rollout().status()
                           }
                           }
                         }
                   }
               }
            )
      }
      stage ('Deploy Loki to Prod'){
            input message: 'Want to deploy to PROD?', ok: 'Hang Tight?'
            parallel (
               'Deploy Loki to Prod':{

                   dir ('loki_pipeline') {
                       checkout scm
                       sh "oc process -f openshift201/templates/loki_template.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} | oc apply -f - -n ${PROD_NAMESPACE}"

                          sh "echo Wait for service to be up"
                       timeout (time: 180, unit: 'SECONDS'){
                           openshift.withCluster() {
                           openshift.withProject("${PROD_NAMESPACE}") {
                               def dc = openshift.selector('deployment', "${LOKI_SERVICE}")
                               // this will wait until the desired replicas are available
                               dc.rollout().status()
                           }
                           }
                         }
                   }
               },
               'Deploy Prometheus to Prod':{

                   dir ('prometheus_pipeline') {
                       checkout scm
                       sh "oc process -f openshift201/templates/prometheus_template.yaml -p  PROMETHEUS_SERVICE_NAME=${PROMETHEUS_SERVICE} -p PROMETHEUS_PVC_SIZE=${PROMETHEUS_PVC_SIZE} -p NAMESPACE=${PROD_NAMESPACE} | oc apply -f - -n ${PROD_NAMESPACE}"

                          sh "echo Wait for service to be up"
                       timeout (time: 180, unit: 'SECONDS'){
                           openshift.withCluster() {
                           openshift.withProject("${PROD_NAMESPACE}") {
                               def dc = openshift.selector('deployment', "${PROMETHEUS_SERVICE}")
                               // this will wait until the desired replicas are available
                               dc.rollout().status()
                           }
                           }
                         }
                   }
               },
               'Deploy Grafana to Prod':{

                   dir ('grafana_pipeline') {
                       checkout scm
                       sh "oc process -f openshift201/templates/grafana_template.yaml -p  GRAFANA_SERVICE_NAME=${GRAFANA_SERVICE} -p LOKI_SERVICE_NAME=${LOKI_SERVICE} -p  PROMETHEUS_SERVICE_NAME=${PROMETHEUS_SERVICE} -p ROUTE_SUBDOMAIN=${ROUTE_SUBDOMAIN} -p NAMESPACE=${PROD_NAMESPACE} | oc apply -f - -n ${PROD_NAMESPACE}"

                          sh "echo Wait for service to be up"
                       timeout (time: 180, unit: 'SECONDS'){
                           openshift.withCluster() {
                           openshift.withProject("${PROD_NAMESPACE}") {
                               def dc = openshift.selector('dc', "${GRAFANA_SERVICE}")
                               // this will wait until the desired replicas are available
                               dc.rollout().status()
                           }
                           }
                         }
                   }
               }
            )
            /*
                dir ('simple_pipeline') {
                    checkout scm
                    sh "oc process -f openshift201/templates/loki_template.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} | oc apply -f - -n ${PROD_NAMESPACE}"

                    sh "echo Wait for service to be up"
                    timeout (time: 180, unit: 'SECONDS'){
                        openshift.withCluster() {
                        openshift.withProject("${PROD_NAMESPACE}") {
                            def dc = openshift.selector('deployment', "${LOKI_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc.rollout().status()
                        }
                        }
                      }
                }
            */
      }
    }
