apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: grafana-template
message: >-
  The following service(s) have been created in your project:
  ${GRAFANA_SERVICE_NAME}.

  For more information about using this template, including OpenShift
  considerations, contact the rocketchat community.
metadata:
  annotations:
    description: >-
      Grafana Template for use in OpenShift 201 lab without persistent storage. 


      WARNING: Any configuration stored will be lost upon pod destruction.
      ConfigMaps should be used for codified configuration. 
    iconClass: icon-other-unknown
    openshift.io/display-name: grafana-openshift201
    openshift.io/documentation-url: 'https://github.com/bcdevops/devops-platform-workshops'
    openshift.io/long-description: This template provides a sample Grafana configuration for lab purposes.
    openshift.io/provider-display-name: BCDevOps
    openshift.io/support-url: 'https://github.com/bcdevops/'
    tags: 'monitoring,grafana'
  name: grafana-template
objects:
  - apiVersion: v1
    kind: Pod
    spec:
      containers:
        - image: >-
            grafana/grafana@sha256:ced97851c89ca7d1e67a43aabbe05452e144a9bc9ffc63d2220dc2f37fdc1a71
          imagePullPolicy: IfNotPresent
          name: '${GRAFANA_SERVICE_NAME}'
          ports:
            - containerPort: 3000
              protocol: TCP
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            capabilities:
              drop:
                - KILL
                - MKNOD
                - SETGID
                - SETUID
            runAsUser: 1007540000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/grafana/provisioning/dashboards
              name: volume-q2h0q
            - mountPath: /var/lib/grafana/dashboards/
              name: volume-g1a5q
            - mountPath: /etc/grafana/provisioning/datasources/
              name: volume-nhen1
            - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              name: default-token-82c4r
              readOnly: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: default-dockercfg-xq5vd
      nodeName: ociopf-p-191.dmz
      nodeSelector:
        region: app
      priority: 0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1007540000
        seLinuxOptions:
          level: 's0:c87,c29'
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      tolerations:
        - effect: NoSchedule
          key: node.kubernetes.io/memory-pressure
          operator: Exists
      volumes:
        - configMap:
            defaultMode: 420
            name: '${GRAFANA_SERVICE_NAME}-dashboard-providers'
          name: volume-q2h0q
        - configMap:
            defaultMode: 420
            name: '${GRAFANA_SERVICE_NAME}-simple-dashboard'
          name: volume-g1a5q
        - configMap:
            defaultMode: 420
            name: '${GRAFANA_SERVICE_NAME}-datasources'
          name: volume-nhen1
        - name: default-token-82c4r
          secret:
            defaultMode: 420
            secretName: default-token-82c4r
    metadata:
      annotations:
        kubernetes.io/limit-ranger: >-
          LimitRanger plugin set: cpu, memory request for container
          ${GRAFANA_SERVICE_NAME}; cpu, memory limit for container
          ${GRAFANA_SERVICE_NAME}
        openshift.io/deployment-config.latest-version: '9'
        openshift.io/deployment-config.name: '${GRAFANA_SERVICE_NAME}'
        openshift.io/deployment.name: '${GRAFANA_SERVICE_NAME}-9'
        openshift.io/generated-by: OpenShiftNewApp
        openshift.io/scc: restricted
      generateName: '${GRAFANA_SERVICE_NAME}-9-'
      labels:
        app: '${GRAFANA_SERVICE_NAME}'
        deployment: '${GRAFANA_SERVICE_NAME}-9'
        deploymentconfig: '${GRAFANA_SERVICE_NAME}'
      name: '${GRAFANA_SERVICE_NAME}-9-plwm4'
      ownerReferences:
        - apiVersion: v1
          controller: true
          kind: ReplicationController
          name: '${GRAFANA_SERVICE_NAME}-9'
          uid: e6aaec74-80c1-11e9-bf26-0050568379a2
  - apiVersion: v1
    kind: Service
    spec:
      ports:
        - name: 3000-tcp
          port: 3000
          protocol: TCP
          targetPort: 3000
      selector:
        app: '${GRAFANA_SERVICE_NAME}'
        deploymentconfig: '${GRAFANA_SERVICE_NAME}'
      sessionAffinity: None
      type: ClusterIP
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      labels:
        app: '${GRAFANA_SERVICE_NAME}'
      name: '${GRAFANA_SERVICE_NAME}'
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: '${GRAFANA_SERVICE_NAME}'
        deploymentconfig: '${GRAFANA_SERVICE_NAME}'
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          annotations:
            openshift.io/generated-by: OpenShiftNewApp
          creationTimestamp: null
          labels:
            app: '${GRAFANA_SERVICE_NAME}'
            deploymentconfig: '${GRAFANA_SERVICE_NAME}'
        spec:
          containers:
            - image: >-
                grafana/grafana@sha256:ced97851c89ca7d1e67a43aabbe05452e144a9bc9ffc63d2220dc2f37fdc1a71
              imagePullPolicy: IfNotPresent
              name: '${GRAFANA_SERVICE_NAME}'
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/grafana/provisioning/dashboards
                  name: volume-q2h0q
                - mountPath: /var/lib/grafana/dashboards/
                  name: volume-g1a5q
                - mountPath: /etc/grafana/provisioning/datasources/
                  name: volume-nhen1
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - configMap:
                defaultMode: 420
                name: '${GRAFANA_SERVICE_NAME}-dashboard-providers'
              name: volume-q2h0q
            - configMap:
                defaultMode: 420
                name: '${GRAFANA_SERVICE_NAME}-simple-dashboard'
              name: volume-g1a5q
            - configMap:
                defaultMode: 420
                name: '${GRAFANA_SERVICE_NAME}-datasources'
              name: volume-nhen1
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - '${GRAFANA_SERVICE_NAME}'
            from:
              kind: ImageStreamTag
              name: '${GRAFANA_SERVICE_NAME}:6.2.0'
            lastTriggeredImage: >-
              grafana/grafana@sha256:ced97851c89ca7d1e67a43aabbe05452e144a9bc9ffc63d2220dc2f37fdc1a71
          type: ImageChange
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      labels:
        app: '${GRAFANA_SERVICE_NAME}'
      name: '${GRAFANA_SERVICE_NAME}'
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    spec:
      lookupPolicy:
        local: false
      tags:
        - annotations:
            openshift.io/imported-from: 'grafana/grafana:6.2.0'
          from:
            kind: DockerImage
            name: 'grafana/grafana:6.2.0'
          generation: 2
          importPolicy: {}
          name: 6.2.0
          referencePolicy:
            type: Source
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
        openshift.io/image.dockerRepositoryCheck: 2019-05-27T20:03:34.000Z
      generation: 2
      labels:
        app: '${GRAFANA_SERVICE_NAME}'
      name: '${GRAFANA_SERVICE_NAME}'
  - apiVersion: route.openshift.io/v1
    kind: Route
    spec:
      host: '${GRAFANA_SERVICE_NAME}-${NAMESPACE}.${ROUTE_SUBDOMAIN}'
      port:
        targetPort: 3000-tcp
      to:
        kind: Service
        name: '${GRAFANA_SERVICE_NAME}'
        weight: 100
      wildcardPolicy: None
    metadata:
      annotations:
        openshift.io/host.generated: 'true'
      labels:
        app: '${GRAFANA_SERVICE_NAME}'
      name: '${GRAFANA_SERVICE_NAME}'
  - apiVersion: v1
    data:
      dashboard.yml: |-
        apiVersion: 1

        providers:
          # <string> provider name
        - name: 'default'
          # <int> org id. will default to orgId 1 if not specified
          orgId: 1
          # <string, required> name of the dashboard folder. Required
          folder: ''
          # <string> folder UID. will be automatically generated if not specified
          folderUid: ''
          # <string, required> provider type. Required
          type: file
          # <bool> disable dashboard deletion
          disableDeletion: false
          # <bool> enable dashboard editing
          editable: true
          # <int> how often Grafana will scan for changed dashboards
          updateIntervalSeconds: 10  
          options:
            # <string, required> path to dashboard files on disk. Required
            path: /var/lib/grafana/dashboards
    kind: ConfigMap
    metadata:
      labels:
        app: '${GRAFANA_SERVICE_NAME}'
      name: '${GRAFANA_SERVICE_NAME}-dashboard-providers'
  - apiVersion: v1
    data:
      datasources.yml: |-
        # config file version
        apiVersion: 1

        datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          orgId: 1
          url: http://${PROMETHEUS_SERVICE_NAME}:80
          isDefault: true
          version: 1
          editable: true
        - name: Loki
          type: loki
          orgId: 1
          access: proxy
          url: http://${LOKI_SERVICE_NAME}:3100
          jsonData:
              maxLines: 1000
    kind: ConfigMap
    metadata:
      labels:
        app: '${GRAFANA_SERVICE_NAME}'
      name: '${GRAFANA_SERVICE_NAME}-datasources'
  - apiVersion: v1
    data:
      simple-dashboard.json: |-
        {
          "annotations": {
            "list": [
              {
                "builtIn": 1,
                "datasource": "-- Grafana --",
                "enable": true,
                "hide": true,
                "iconColor": "rgba(0, 211, 255, 1)",
                "name": "Annotations & Alerts",
                "type": "dashboard"
              }
            ]
          },
          "editable": true,
          "gnetId": null,
          "graphTooltip": 0,
          "id": 1,
          "links": [],
          "panels": [
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "datasource": "Prometheus",
              "format": "none",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 0
              },
              "id": 2,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "pluginVersion": "6.2.0",
              "postfix": "",
              "postfixFontSize": "50%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": false
              },
              "tableColumn": "",
              "targets": [
                {
                  "expr": "sum(up)",
                  "format": "time_series",
                  "intervalFactor": 1,
                  "refId": "B"
                },
                {
                  "expr": "",
                  "format": "time_series",
                  "intervalFactor": 1,
                  "refId": "A"
                }
              ],
              "thresholds": "",
              "timeFrom": null,
              "timeShift": null,
              "title": "Total Pods Watched Prometheus",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "avg"
            }
          ],
          "schemaVersion": 18,
          "style": "dark",
          "tags": [],
          "templating": {
            "list": []
          },
          "time": {
            "from": "now-6h",
            "to": "now"
          },
          "timepicker": {
            "refresh_intervals": [
              "5s",
              "10s",
              "30s",
              "1m",
              "5m",
              "15m",
              "30m",
              "1h",
              "2h",
              "1d"
            ],
            "time_options": [
              "5m",
              "15m",
              "1h",
              "6h",
              "12h",
              "24h",
              "2d",
              "7d",
              "30d"
            ]
          },
          "timezone": "",
          "title": "Simple Dash",
          "uid": "ndvcNRMZk",
          "version": 1
        }
    kind: ConfigMap
    metadata:
      labels:
        app: '${GRAFANA_SERVICE_NAME}'
      name: '${GRAFANA_SERVICE_NAME}-simple-dashboard'
parameters:
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The namespace this templated is deployed into.
    displayName: Namespace
    name: NAMESPACE
    value: openshift
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Grafana Service Name
    name: GRAFANA_SERVICE_NAME
    required: true
    value: grafana
  - description: The name of the Loki service to connect to.
    displayName: Loki Service Name
    name: LOKI_SERVICE_NAME
    required: true
    value: loki
  - description: The name of the Prometheus service to connect to.
    displayName: Prometheus Service Name
    name: PROMETHEUS_SERVICE_NAME
    required: true
    value: prometheus
  - description: Default route subdomain
    displayName: Route subdomain
    name: ROUTE_SUBDOMAIN
    required: true
    value: pathfinder.gov.bc.ca
