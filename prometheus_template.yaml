apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: prometheus-template
message: >-
  The following service(s) have been created in your project:
  ${PROMETHEUS_SERVICE_NAME}.

  For more information about using this template, including OpenShift
  considerations, contact the rocketchat community.
metadata:
  annotations:
    description: >-
      Prometheus Template for use in OpenShift 201 lab. 


      WARNING: Any configuration stored will be lost upon pod destruction.
      ConfigMaps should be used for codified configuration. 
    iconClass: icon-other-unknown
    openshift.io/display-name: prometheus-openshift201
    openshift.io/documentation-url: 'https://github.com/bcdevops/devops-platform-workshops'
    openshift.io/long-description: This template provides a sample Prometheus configuration for lab purposes.
    openshift.io/provider-display-name: BCDevOps
    openshift.io/support-url: 'https://github.com/bcdevops/'
    tags: 'monitoring,prometheus'
  name: prometheus-template
objects:
  - apiVersion: v1
    kind: Pod
    spec:
      containers:
        - args:
            - '--volume-dir=/etc/config'
            - '--webhook-url=http://127.0.0.1:9090/-/reload'
          image: 'jimmidyson/configmap-reload:v0.2.2'
          imagePullPolicy: IfNotPresent
          name: '${PROMETHEUS_SERVICE_NAME}-configmap-reload'
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            capabilities:
              drop:
                - KILL
                - MKNOD
                - SETGID
                - SETUID
            runAsUser: 1007540000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
              readOnly: true
            - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              name: default-token-82c4r
              readOnly: true
        - args:
            - '--config.file=/etc/config/prometheus.yml'
            - '--storage.tsdb.path=/data'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
          image: 'prom/prometheus:v2.9.2'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: '${PROMETHEUS_SERVICE_NAME}'
          ports:
            - containerPort: 9090
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            capabilities:
              drop:
                - KILL
                - MKNOD
                - SETGID
                - SETUID
            runAsUser: 1007540000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
            - mountPath: /data
              name: storage-volume
            - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              name: default-token-82c4r
              readOnly: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: default-dockercfg-xq5vd
      nodeName: ociopf-p-191.dmz
      nodeSelector:
        region: app
      priority: 0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1007540000
        seLinuxOptions:
          level: 's0:c87,c29'
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 300
      tolerations:
        - effect: NoSchedule
          key: node.kubernetes.io/memory-pressure
          operator: Exists
      volumes:
        - configMap:
            defaultMode: 420
            name: '${PROMETHEUS_SERVICE_NAME}'
          name: config-volume
        - name: storage-volume
          persistentVolumeClaim:
            claimName: '${PROMETHEUS_SERVICE_NAME}'
        - name: default-token-82c4r
          secret:
            defaultMode: 420
            secretName: default-token-82c4r
    metadata:
      annotations:
        kubectl.kubernetes.io/last-applied-configuration: >
          {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{"kubernetes.io/limit-ranger":"LimitRanger
          plugin set: cpu, memory request for container
          ${PROMETHEUS_SERVICE_NAME}-configmap-reload; cpu, memory limit for
          container ${PROMETHEUS_SERVICE_NAME}-configmap-reload; cpu, memory
          request for container ${PROMETHEUS_SERVICE_NAME}; cpu, memory limit
          for container
          ${PROMETHEUS_SERVICE_NAME}","openshift.io/scc":"restricted"},"generateName":"${PROMETHEUS_SERVICE_NAME}-74d8855548-","labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"3084411104","release":"${PROMETHEUS_SERVICE_NAME}"},"name":"${PROMETHEUS_SERVICE_NAME}-74d8r6g7l","namespace":"${NAMESPACE}"},"spec":{"containers":[{"args":["--volume-dir=/etc/config","--webhook-url=http://127.0.0.1:9090/-/reload"],"image":"jimmidyson/configmap-reload:v0.2.2","imagePullPolicy":"IfNotPresent","name":"${PROMETHEUS_SERVICE_NAME}-configmap-reload","resources":{"limits":{"cpu":"250m","memory":"1Gi"},"requests":{"cpu":"100m","memory":"256Mi"}},"securityContext":{"capabilities":{"drop":["KILL","MKNOD","SETGID","SETUID"]},"runAsUser":1007540000},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume","readOnly":true},{"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount","name":"default-token-82c4r","readOnly":true}]},{"args":["--config.file=/etc/config/prometheus.yml","--storage.tsdb.path=/data","--web.console.libraries=/etc/prometheus/console_libraries","--web.console.templates=/etc/prometheus/consoles","--web.enable-lifecycle"],"image":"prom/prometheus:v2.9.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/healthy","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"name":"${PROMETHEUS_SERVICE_NAME}","ports":[{"containerPort":9090,"protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/ready","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"resources":{"limits":{"cpu":"250m","memory":"1Gi"},"requests":{"cpu":"100m","memory":"256Mi"}},"securityContext":{"capabilities":{"drop":["KILL","MKNOD","SETGID","SETUID"]},"runAsUser":1007540000},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume"},{"mountPath":"/data","name":"storage-volume"},{"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount","name":"default-token-82c4r","readOnly":true}]}],"dnsPolicy":"ClusterFirst","imagePullSecrets":[{"name":"default-dockercfg-xq5vd"}],"nodeName":"ociopf-p-191.dmz","nodeSelector":{"region":"app"},"priority":0,"restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{"fsGroup":1007540000,"seLinuxOptions":{"level":"s0:c87,c29"}},"serviceAccount":"default","serviceAccountName":"default","terminationGracePeriodSeconds":300,"tolerations":[{"effect":"NoSchedule","key":"node.kubernetes.io/memory-pressure","operator":"Exists"}],"volumes":[{"configMap":{"defaultMode":420,"name":"${PROMETHEUS_SERVICE_NAME}"},"name":"config-volume"},{"name":"storage-volume","persistentVolumeClaim":{"claimName":"${PROMETHEUS_SERVICE_NAME}"}},{"name":"default-token-82c4r","secret":{"defaultMode":420,"secretName":"default-token-82c4r"}}]}}
        kubernetes.io/limit-ranger: >-
          LimitRanger plugin set: cpu, memory request for container
          ${PROMETHEUS_SERVICE_NAME}-configmap-reload; cpu, memory limit for
          container ${PROMETHEUS_SERVICE_NAME}-configmap-reload; cpu, memory
          request for container ${PROMETHEUS_SERVICE_NAME}; cpu, memory limit
          for container ${PROMETHEUS_SERVICE_NAME}
        openshift.io/scc: restricted
      generateName: '${PROMETHEUS_SERVICE_NAME}-74d8855548-'
      labels:
        app: prometheus
        chart: prometheus-8.11.4
        component: '${PROMETHEUS_SERVICE_NAME}'
        heritage: Tiller
        pod-template-hash: '3084411104'
        release: '${PROMETHEUS_SERVICE_NAME}'
      name: '${PROMETHEUS_SERVICE_NAME}-74d8r6g7l'
      ownerReferences:
        - apiVersion: apps/v1
          controller: true
          kind: ReplicaSet
          name: '${PROMETHEUS_SERVICE_NAME}-74d8855548'
          uid: c266cfed-80d2-11e9-8dc7-0050568348cc
  - apiVersion: v1
    kind: Service
    spec:
      ports:
        - name: http
          port: 80
          protocol: TCP
          targetPort: 9090
      selector:
        app: prometheus
        component: '${PROMETHEUS_SERVICE_NAME}'
        release: '${PROMETHEUS_SERVICE_NAME}'
      sessionAffinity: None
      type: ClusterIP
    metadata:
      annotations:
        kubectl.kubernetes.io/last-applied-configuration: >
          {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","release":"${PROMETHEUS_SERVICE_NAME}"},"name":"${PROMETHEUS_SERVICE_NAME}","namespace":"${NAMESPACE}"},"spec":{"clusterIP":"172.50.99.237","ports":[{"name":"http","port":80,"protocol":"TCP","targetPort":9090}],"selector":{"app":"prometheus","component":"${PROMETHEUS_SERVICE_NAME}","release":"${PROMETHEUS_SERVICE_NAME}"},"sessionAffinity":"None","type":"ClusterIP"}}
      labels:
        app: prometheus
        chart: prometheus-8.11.4
        component: '${PROMETHEUS_SERVICE_NAME}'
        heritage: Tiller
        release: '${PROMETHEUS_SERVICE_NAME}'
      name: '${PROMETHEUS_SERVICE_NAME}'
  - apiVersion: apps/v1
    kind: Deployment
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: prometheus
          component: '${PROMETHEUS_SERVICE_NAME}'
          release: '${PROMETHEUS_SERVICE_NAME}'
      strategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: prometheus
            chart: prometheus-8.11.4
            component: '${PROMETHEUS_SERVICE_NAME}'
            heritage: Tiller
            release: '${PROMETHEUS_SERVICE_NAME}'
        spec:
          containers:
            - args:
                - '--volume-dir=/etc/config'
                - '--webhook-url=http://127.0.0.1:9090/-/reload'
              image: 'jimmidyson/configmap-reload:v0.2.2'
              imagePullPolicy: IfNotPresent
              name: '${PROMETHEUS_SERVICE_NAME}-configmap-reload'
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                  readOnly: true
            - args:
                - '--config.file=/etc/config/prometheus.yml'
                - '--storage.tsdb.path=/data'
                - '--web.console.libraries=/etc/prometheus/console_libraries'
                - '--web.console.templates=/etc/prometheus/consoles'
                - '--web.enable-lifecycle'
              image: 'prom/prometheus:v2.9.2'
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/healthy
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              name: '${PROMETHEUS_SERVICE_NAME}'
              ports:
                - containerPort: 9090
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/ready
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                - mountPath: /data
                  name: storage-volume
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccount: default
          serviceAccountName: default
          terminationGracePeriodSeconds: 300
          volumes:
            - configMap:
                defaultMode: 420
                name: '${PROMETHEUS_SERVICE_NAME}'
              name: config-volume
            - name: storage-volume
              persistentVolumeClaim:
                claimName: '${PROMETHEUS_SERVICE_NAME}'
    metadata:
      annotations:
        deployment.kubernetes.io/revision: '6'
        kubectl.kubernetes.io/last-applied-configuration: >
          {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"deployment.kubernetes.io/revision":"6"},"generation":6,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","release":"${PROMETHEUS_SERVICE_NAME}"},"name":"${PROMETHEUS_SERVICE_NAME}","namespace":"${NAMESPACE}"},"spec":{"progressDeadlineSeconds":600,"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app":"prometheus","component":"${PROMETHEUS_SERVICE_NAME}","release":"${PROMETHEUS_SERVICE_NAME}"}},"strategy":{"rollingUpdate":{"maxSurge":1,"maxUnavailable":1},"type":"RollingUpdate"},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","release":"${PROMETHEUS_SERVICE_NAME}"}},"spec":{"containers":[{"args":["--volume-dir=/etc/config","--webhook-url=http://127.0.0.1:9090/-/reload"],"image":"jimmidyson/configmap-reload:v0.2.2","imagePullPolicy":"IfNotPresent","name":"${PROMETHEUS_SERVICE_NAME}-configmap-reload","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume","readOnly":true}]},{"args":["--config.file=/etc/config/prometheus.yml","--storage.tsdb.path=/data","--web.console.libraries=/etc/prometheus/console_libraries","--web.console.templates=/etc/prometheus/consoles","--web.enable-lifecycle"],"image":"prom/prometheus:v2.9.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/healthy","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"name":"${PROMETHEUS_SERVICE_NAME}","ports":[{"containerPort":9090,"protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/ready","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume"},{"mountPath":"/data","name":"storage-volume"}]}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"serviceAccount":"default","serviceAccountName":"default","terminationGracePeriodSeconds":300,"volumes":[{"configMap":{"defaultMode":420,"name":"${PROMETHEUS_SERVICE_NAME}"},"name":"config-volume"},{"name":"storage-volume","persistentVolumeClaim":{"claimName":"${PROMETHEUS_SERVICE_NAME}"}}]}}}}
      generation: 1
      labels:
        app: prometheus
        chart: prometheus-8.11.4
        component: '${PROMETHEUS_SERVICE_NAME}'
        heritage: Tiller
        release: '${PROMETHEUS_SERVICE_NAME}'
      name: '${PROMETHEUS_SERVICE_NAME}'
  - apiVersion: apps/v1
    kind: ReplicaSet
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: prometheus
          component: '${PROMETHEUS_SERVICE_NAME}'
          pod-template-hash: '1796689896'
          release: '${PROMETHEUS_SERVICE_NAME}'
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: prometheus
            chart: prometheus-8.11.4
            component: '${PROMETHEUS_SERVICE_NAME}'
            heritage: Tiller
            pod-template-hash: '1796689896'
            release: '${PROMETHEUS_SERVICE_NAME}'
        spec:
          containers:
            - args:
                - '--volume-dir=/etc/config'
                - '--webhook-url=http://127.0.0.1:9090/-/reload'
              image: 'jimmidyson/configmap-reload:v0.2.2'
              imagePullPolicy: IfNotPresent
              name: '${PROMETHEUS_SERVICE_NAME}-configmap-reload'
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                  readOnly: true
            - args:
                - '--config.file=/etc/config/prometheus.yml'
                - '--storage.tsdb.path=/data'
                - '--web.console.libraries=/etc/prometheus/console_libraries'
                - '--web.console.templates=/etc/prometheus/consoles'
                - '--web.enable-lifecycle'
              image: 'prom/prometheus:v2.9.2'
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/healthy
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              name: '${PROMETHEUS_SERVICE_NAME}'
              ports:
                - containerPort: 9090
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/ready
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                - mountPath: /data
                  name: storage-volume
          dnsPolicy: ClusterFirst
          initContainers:
            - command:
                - chown
                - '-R'
                - '65534:65534'
                - /data
              image: 'busybox:latest'
              imagePullPolicy: IfNotPresent
              name: init-chown-data
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /data
                  name: storage-volume
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccount: admin
          serviceAccountName: admin
          terminationGracePeriodSeconds: 300
          volumes:
            - configMap:
                defaultMode: 420
                name: '${PROMETHEUS_SERVICE_NAME}'
              name: config-volume
            - name: storage-volume
              persistentVolumeClaim:
                claimName: '${PROMETHEUS_SERVICE_NAME}'
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: '1'
        deployment.kubernetes.io/max-replicas: '2'
        deployment.kubernetes.io/revision: '4'
        kubectl.kubernetes.io/last-applied-configuration: >
          {"apiVersion":"apps/v1","kind":"ReplicaSet","metadata":{"annotations":{"deployment.kubernetes.io/desired-replicas":"1","deployment.kubernetes.io/max-replicas":"2","deployment.kubernetes.io/revision":"4"},"generation":2,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"1796689896","release":"${PROMETHEUS_SERVICE_NAME}"},"name":"${PROMETHEUS_SERVICE_NAME}-5cfbbdfdfb","namespace":"${NAMESPACE}"},"spec":{"replicas":0,"selector":{"matchLabels":{"app":"prometheus","component":"${PROMETHEUS_SERVICE_NAME}","pod-template-hash":"1796689896","release":"${PROMETHEUS_SERVICE_NAME}"}},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"1796689896","release":"${PROMETHEUS_SERVICE_NAME}"}},"spec":{"containers":[{"args":["--volume-dir=/etc/config","--webhook-url=http://127.0.0.1:9090/-/reload"],"image":"jimmidyson/configmap-reload:v0.2.2","imagePullPolicy":"IfNotPresent","name":"${PROMETHEUS_SERVICE_NAME}-configmap-reload","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume","readOnly":true}]},{"args":["--config.file=/etc/config/prometheus.yml","--storage.tsdb.path=/data","--web.console.libraries=/etc/prometheus/console_libraries","--web.console.templates=/etc/prometheus/consoles","--web.enable-lifecycle"],"image":"prom/prometheus:v2.9.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/healthy","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"name":"${PROMETHEUS_SERVICE_NAME}","ports":[{"containerPort":9090,"protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/ready","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume"},{"mountPath":"/data","name":"storage-volume"}]}],"dnsPolicy":"ClusterFirst","initContainers":[{"command":["chown","-R","65534:65534","/data"],"image":"busybox:latest","imagePullPolicy":"IfNotPresent","name":"init-chown-data","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/data","name":"storage-volume"}]}],"restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"serviceAccount":"admin","serviceAccountName":"admin","terminationGracePeriodSeconds":300,"volumes":[{"configMap":{"defaultMode":420,"name":"${PROMETHEUS_SERVICE_NAME}"},"name":"config-volume"},{"name":"storage-volume","persistentVolumeClaim":{"claimName":"${PROMETHEUS_SERVICE_NAME}"}}]}}}}
      generation: 1
      labels:
        app: prometheus
        chart: prometheus-8.11.4
        component: '${PROMETHEUS_SERVICE_NAME}'
        heritage: Tiller
        pod-template-hash: '1796689896'
        release: '${PROMETHEUS_SERVICE_NAME}'
      name: '${PROMETHEUS_SERVICE_NAME}-5cfbbdfdfb'
  - apiVersion: apps/v1
    kind: ReplicaSet
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: prometheus
          component: '${PROMETHEUS_SERVICE_NAME}'
          pod-template-hash: '2356090436'
          release: '${PROMETHEUS_SERVICE_NAME}'
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: prometheus
            chart: prometheus-8.11.4
            component: '${PROMETHEUS_SERVICE_NAME}'
            heritage: Tiller
            pod-template-hash: '2356090436'
            release: '${PROMETHEUS_SERVICE_NAME}'
        spec:
          containers:
            - args:
                - '--volume-dir=/etc/config'
                - '--webhook-url=http://127.0.0.1:9090/-/reload'
              image: 'jimmidyson/configmap-reload:v0.2.2'
              imagePullPolicy: IfNotPresent
              name: '${PROMETHEUS_SERVICE_NAME}-configmap-reload'
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                  readOnly: true
            - args:
                - '--config.file=/etc/config/prometheus.yml'
                - '--storage.tsdb.path=/data'
                - '--web.console.libraries=/etc/prometheus/console_libraries'
                - '--web.console.templates=/etc/prometheus/consoles'
                - '--web.enable-lifecycle'
              image: 'prom/prometheus:v2.9.2'
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/healthy
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              name: '${PROMETHEUS_SERVICE_NAME}'
              ports:
                - containerPort: 9090
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/ready
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                - mountPath: /data
                  name: storage-volume
          dnsPolicy: ClusterFirst
          initContainers:
            - command:
                - chown
                - '-R'
                - '65534:65534'
                - /data
              image: 'busybox:latest'
              imagePullPolicy: IfNotPresent
              name: init-chown-data
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /data
                  name: storage-volume
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccount: bcdevops-admin
          serviceAccountName: bcdevops-admin
          terminationGracePeriodSeconds: 300
          volumes:
            - configMap:
                defaultMode: 420
                name: '${PROMETHEUS_SERVICE_NAME}'
              name: config-volume
            - name: storage-volume
              persistentVolumeClaim:
                claimName: '${PROMETHEUS_SERVICE_NAME}'
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: '1'
        deployment.kubernetes.io/max-replicas: '2'
        deployment.kubernetes.io/revision: '5'
        kubectl.kubernetes.io/last-applied-configuration: >
          {"apiVersion":"apps/v1","kind":"ReplicaSet","metadata":{"annotations":{"deployment.kubernetes.io/desired-replicas":"1","deployment.kubernetes.io/max-replicas":"2","deployment.kubernetes.io/revision":"5"},"generation":2,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"2356090436","release":"${PROMETHEUS_SERVICE_NAME}"},"name":"${PROMETHEUS_SERVICE_NAME}-679b4f487b","namespace":"${NAMESPACE}"},"spec":{"replicas":0,"selector":{"matchLabels":{"app":"prometheus","component":"${PROMETHEUS_SERVICE_NAME}","pod-template-hash":"2356090436","release":"${PROMETHEUS_SERVICE_NAME}"}},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"2356090436","release":"${PROMETHEUS_SERVICE_NAME}"}},"spec":{"containers":[{"args":["--volume-dir=/etc/config","--webhook-url=http://127.0.0.1:9090/-/reload"],"image":"jimmidyson/configmap-reload:v0.2.2","imagePullPolicy":"IfNotPresent","name":"${PROMETHEUS_SERVICE_NAME}-configmap-reload","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume","readOnly":true}]},{"args":["--config.file=/etc/config/prometheus.yml","--storage.tsdb.path=/data","--web.console.libraries=/etc/prometheus/console_libraries","--web.console.templates=/etc/prometheus/consoles","--web.enable-lifecycle"],"image":"prom/prometheus:v2.9.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/healthy","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"name":"${PROMETHEUS_SERVICE_NAME}","ports":[{"containerPort":9090,"protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/ready","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume"},{"mountPath":"/data","name":"storage-volume"}]}],"dnsPolicy":"ClusterFirst","initContainers":[{"command":["chown","-R","65534:65534","/data"],"image":"busybox:latest","imagePullPolicy":"IfNotPresent","name":"init-chown-data","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/data","name":"storage-volume"}]}],"restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"serviceAccount":"bcdevops-admin","serviceAccountName":"bcdevops-admin","terminationGracePeriodSeconds":300,"volumes":[{"configMap":{"defaultMode":420,"name":"${PROMETHEUS_SERVICE_NAME}"},"name":"config-volume"},{"name":"storage-volume","persistentVolumeClaim":{"claimName":"${PROMETHEUS_SERVICE_NAME}"}}]}}}}
      generation: 1
      labels:
        app: prometheus
        chart: prometheus-8.11.4
        component: '${PROMETHEUS_SERVICE_NAME}'
        heritage: Tiller
        pod-template-hash: '2356090436'
        release: '${PROMETHEUS_SERVICE_NAME}'
      name: '${PROMETHEUS_SERVICE_NAME}-679b4f487b'
  - apiVersion: apps/v1
    kind: ReplicaSet
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: prometheus
          component: '${PROMETHEUS_SERVICE_NAME}'
          pod-template-hash: '2390366576'
          release: '${PROMETHEUS_SERVICE_NAME}'
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: prometheus
            chart: prometheus-8.11.4
            component: '${PROMETHEUS_SERVICE_NAME}'
            heritage: Tiller
            pod-template-hash: '2390366576'
            release: '${PROMETHEUS_SERVICE_NAME}'
        spec:
          containers:
            - args:
                - '--volume-dir=/etc/config'
                - '--webhook-url=http://127.0.0.1:9090/-/reload'
              image: 'jimmidyson/configmap-reload:v0.2.2'
              imagePullPolicy: IfNotPresent
              name: '${PROMETHEUS_SERVICE_NAME}-configmap-reload'
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                  readOnly: true
            - args:
                - '--config.file=/etc/config/prometheus.yml'
                - '--storage.tsdb.path=/data'
                - '--web.console.libraries=/etc/prometheus/console_libraries'
                - '--web.console.templates=/etc/prometheus/consoles'
                - '--web.enable-lifecycle'
              image: 'prom/prometheus:v2.9.2'
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/healthy
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              name: '${PROMETHEUS_SERVICE_NAME}'
              ports:
                - containerPort: 9090
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/ready
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                - mountPath: /data
                  name: storage-volume
          dnsPolicy: ClusterFirst
          initContainers:
            - command:
                - chown
                - '-R'
                - '65534:65534'
                - /data
              image: 'busybox:latest'
              imagePullPolicy: IfNotPresent
              name: init-chown-data
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /data
                  name: storage-volume
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccount: default
          serviceAccountName: default
          terminationGracePeriodSeconds: 300
          volumes:
            - configMap:
                defaultMode: 420
                name: '${PROMETHEUS_SERVICE_NAME}'
              name: config-volume
            - name: storage-volume
              persistentVolumeClaim:
                claimName: '${PROMETHEUS_SERVICE_NAME}'
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: '1'
        deployment.kubernetes.io/max-replicas: '2'
        deployment.kubernetes.io/revision: '1'
        kubectl.kubernetes.io/last-applied-configuration: >
          {"apiVersion":"apps/v1","kind":"ReplicaSet","metadata":{"annotations":{"deployment.kubernetes.io/desired-replicas":"1","deployment.kubernetes.io/max-replicas":"2","deployment.kubernetes.io/revision":"1"},"generation":2,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"2390366576","release":"${PROMETHEUS_SERVICE_NAME}"},"name":"${PROMETHEUS_SERVICE_NAME}-67f47bb9cb","namespace":"${NAMESPACE}"},"spec":{"replicas":0,"selector":{"matchLabels":{"app":"prometheus","component":"${PROMETHEUS_SERVICE_NAME}","pod-template-hash":"2390366576","release":"${PROMETHEUS_SERVICE_NAME}"}},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"2390366576","release":"${PROMETHEUS_SERVICE_NAME}"}},"spec":{"containers":[{"args":["--volume-dir=/etc/config","--webhook-url=http://127.0.0.1:9090/-/reload"],"image":"jimmidyson/configmap-reload:v0.2.2","imagePullPolicy":"IfNotPresent","name":"${PROMETHEUS_SERVICE_NAME}-configmap-reload","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume","readOnly":true}]},{"args":["--config.file=/etc/config/prometheus.yml","--storage.tsdb.path=/data","--web.console.libraries=/etc/prometheus/console_libraries","--web.console.templates=/etc/prometheus/consoles","--web.enable-lifecycle"],"image":"prom/prometheus:v2.9.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/healthy","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"name":"${PROMETHEUS_SERVICE_NAME}","ports":[{"containerPort":9090,"protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/ready","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume"},{"mountPath":"/data","name":"storage-volume"}]}],"dnsPolicy":"ClusterFirst","initContainers":[{"command":["chown","-R","65534:65534","/data"],"image":"busybox:latest","imagePullPolicy":"IfNotPresent","name":"init-chown-data","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/data","name":"storage-volume"}]}],"restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"serviceAccount":"default","serviceAccountName":"default","terminationGracePeriodSeconds":300,"volumes":[{"configMap":{"defaultMode":420,"name":"${PROMETHEUS_SERVICE_NAME}"},"name":"config-volume"},{"name":"storage-volume","persistentVolumeClaim":{"claimName":"${PROMETHEUS_SERVICE_NAME}"}}]}}}}
      generation: 1
      labels:
        app: prometheus
        chart: prometheus-8.11.4
        component: '${PROMETHEUS_SERVICE_NAME}'
        heritage: Tiller
        pod-template-hash: '2390366576'
        release: '${PROMETHEUS_SERVICE_NAME}'
      name: '${PROMETHEUS_SERVICE_NAME}-67f47bb9cb'
  - apiVersion: apps/v1
    kind: ReplicaSet
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: prometheus
          component: '${PROMETHEUS_SERVICE_NAME}'
          pod-template-hash: '3084411104'
          release: '${PROMETHEUS_SERVICE_NAME}'
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: prometheus
            chart: prometheus-8.11.4
            component: '${PROMETHEUS_SERVICE_NAME}'
            heritage: Tiller
            pod-template-hash: '3084411104'
            release: '${PROMETHEUS_SERVICE_NAME}'
        spec:
          containers:
            - args:
                - '--volume-dir=/etc/config'
                - '--webhook-url=http://127.0.0.1:9090/-/reload'
              image: 'jimmidyson/configmap-reload:v0.2.2'
              imagePullPolicy: IfNotPresent
              name: '${PROMETHEUS_SERVICE_NAME}-configmap-reload'
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                  readOnly: true
            - args:
                - '--config.file=/etc/config/prometheus.yml'
                - '--storage.tsdb.path=/data'
                - '--web.console.libraries=/etc/prometheus/console_libraries'
                - '--web.console.templates=/etc/prometheus/consoles'
                - '--web.enable-lifecycle'
              image: 'prom/prometheus:v2.9.2'
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/healthy
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              name: '${PROMETHEUS_SERVICE_NAME}'
              ports:
                - containerPort: 9090
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/ready
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                - mountPath: /data
                  name: storage-volume
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccount: default
          serviceAccountName: default
          terminationGracePeriodSeconds: 300
          volumes:
            - configMap:
                defaultMode: 420
                name: '${PROMETHEUS_SERVICE_NAME}'
              name: config-volume
            - name: storage-volume
              persistentVolumeClaim:
                claimName: '${PROMETHEUS_SERVICE_NAME}'
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: '1'
        deployment.kubernetes.io/max-replicas: '2'
        deployment.kubernetes.io/revision: '6'
        deployment.kubernetes.io/revision-history: '1,5'
        kubectl.kubernetes.io/last-applied-configuration: >
          {"apiVersion":"apps/v1","kind":"ReplicaSet","metadata":{"annotations":{"deployment.kubernetes.io/desired-replicas":"1","deployment.kubernetes.io/max-replicas":"2","deployment.kubernetes.io/revision":"6"},"generation":1,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"3084411104","release":"${PROMETHEUS_SERVICE_NAME}"},"name":"${PROMETHEUS_SERVICE_NAME}-74d8855548","namespace":"${NAMESPACE}"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"prometheus","component":"${PROMETHEUS_SERVICE_NAME}","pod-template-hash":"3084411104","release":"${PROMETHEUS_SERVICE_NAME}"}},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"3084411104","release":"${PROMETHEUS_SERVICE_NAME}"}},"spec":{"containers":[{"args":["--volume-dir=/etc/config","--webhook-url=http://127.0.0.1:9090/-/reload"],"image":"jimmidyson/configmap-reload:v0.2.2","imagePullPolicy":"IfNotPresent","name":"${PROMETHEUS_SERVICE_NAME}-configmap-reload","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume","readOnly":true}]},{"args":["--config.file=/etc/config/prometheus.yml","--storage.tsdb.path=/data","--web.console.libraries=/etc/prometheus/console_libraries","--web.console.templates=/etc/prometheus/consoles","--web.enable-lifecycle"],"image":"prom/prometheus:v2.9.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/healthy","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"name":"${PROMETHEUS_SERVICE_NAME}","ports":[{"containerPort":9090,"protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/ready","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume"},{"mountPath":"/data","name":"storage-volume"}]}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"serviceAccount":"default","serviceAccountName":"default","terminationGracePeriodSeconds":300,"volumes":[{"configMap":{"defaultMode":420,"name":"${PROMETHEUS_SERVICE_NAME}"},"name":"config-volume"},{"name":"storage-volume","persistentVolumeClaim":{"claimName":"${PROMETHEUS_SERVICE_NAME}"}}]}}}}
      generation: 1
      labels:
        app: prometheus
        chart: prometheus-8.11.4
        component: '${PROMETHEUS_SERVICE_NAME}'
        heritage: Tiller
        pod-template-hash: '3084411104'
        release: '${PROMETHEUS_SERVICE_NAME}'
      name: '${PROMETHEUS_SERVICE_NAME}-74d8855548'
  - apiVersion: apps/v1
    kind: ReplicaSet
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: prometheus
          component: '${PROMETHEUS_SERVICE_NAME}'
          pod-template-hash: '4008000092'
          release: '${PROMETHEUS_SERVICE_NAME}'
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: prometheus
            chart: prometheus-8.11.4
            component: '${PROMETHEUS_SERVICE_NAME}'
            heritage: Tiller
            pod-template-hash: '4008000092'
            release: '${PROMETHEUS_SERVICE_NAME}'
        spec:
          containers:
            - args:
                - '--volume-dir=/etc/config'
                - '--webhook-url=http://127.0.0.1:9090/-/reload'
              image: 'jimmidyson/configmap-reload:v0.2.2'
              imagePullPolicy: IfNotPresent
              name: '${PROMETHEUS_SERVICE_NAME}-configmap-reload'
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                  readOnly: true
            - args:
                - '--config.file=/etc/config/prometheus.yml'
                - '--storage.tsdb.path=/data'
                - '--web.console.libraries=/etc/prometheus/console_libraries'
                - '--web.console.templates=/etc/prometheus/consoles'
                - '--web.enable-lifecycle'
              image: 'prom/prometheus:v2.9.2'
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/healthy
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              name: '${PROMETHEUS_SERVICE_NAME}'
              ports:
                - containerPort: 9090
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/ready
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                - mountPath: /data
                  name: storage-volume
          dnsPolicy: ClusterFirst
          initContainers:
            - command:
                - chown
                - '-R'
                - '65534:65534'
                - /data
              image: 'busybox:latest'
              imagePullPolicy: IfNotPresent
              name: init-chown-data
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /data
                  name: storage-volume
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccount: '${NAMESPACE}'
          serviceAccountName: '${NAMESPACE}'
          terminationGracePeriodSeconds: 300
          volumes:
            - configMap:
                defaultMode: 420
                name: '${PROMETHEUS_SERVICE_NAME}'
              name: config-volume
            - name: storage-volume
              persistentVolumeClaim:
                claimName: '${PROMETHEUS_SERVICE_NAME}'
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: '1'
        deployment.kubernetes.io/max-replicas: '2'
        deployment.kubernetes.io/revision: '2'
        kubectl.kubernetes.io/last-applied-configuration: >
          {"apiVersion":"apps/v1","kind":"ReplicaSet","metadata":{"annotations":{"deployment.kubernetes.io/desired-replicas":"1","deployment.kubernetes.io/max-replicas":"2","deployment.kubernetes.io/revision":"2"},"generation":2,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"4008000092","release":"${PROMETHEUS_SERVICE_NAME}"},"name":"${PROMETHEUS_SERVICE_NAME}-844d4444f6","namespace":"${NAMESPACE}"},"spec":{"replicas":0,"selector":{"matchLabels":{"app":"prometheus","component":"${PROMETHEUS_SERVICE_NAME}","pod-template-hash":"4008000092","release":"${PROMETHEUS_SERVICE_NAME}"}},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"4008000092","release":"${PROMETHEUS_SERVICE_NAME}"}},"spec":{"containers":[{"args":["--volume-dir=/etc/config","--webhook-url=http://127.0.0.1:9090/-/reload"],"image":"jimmidyson/configmap-reload:v0.2.2","imagePullPolicy":"IfNotPresent","name":"${PROMETHEUS_SERVICE_NAME}-configmap-reload","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume","readOnly":true}]},{"args":["--config.file=/etc/config/prometheus.yml","--storage.tsdb.path=/data","--web.console.libraries=/etc/prometheus/console_libraries","--web.console.templates=/etc/prometheus/consoles","--web.enable-lifecycle"],"image":"prom/prometheus:v2.9.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/healthy","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"name":"${PROMETHEUS_SERVICE_NAME}","ports":[{"containerPort":9090,"protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/ready","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume"},{"mountPath":"/data","name":"storage-volume"}]}],"dnsPolicy":"ClusterFirst","initContainers":[{"command":["chown","-R","65534:65534","/data"],"image":"busybox:latest","imagePullPolicy":"IfNotPresent","name":"init-chown-data","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/data","name":"storage-volume"}]}],"restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"serviceAccount":"${NAMESPACE}","serviceAccountName":"${NAMESPACE}","terminationGracePeriodSeconds":300,"volumes":[{"configMap":{"defaultMode":420,"name":"${PROMETHEUS_SERVICE_NAME}"},"name":"config-volume"},{"name":"storage-volume","persistentVolumeClaim":{"claimName":"${PROMETHEUS_SERVICE_NAME}"}}]}}}}
      generation: 1
      labels:
        app: prometheus
        chart: prometheus-8.11.4
        component: '${PROMETHEUS_SERVICE_NAME}'
        heritage: Tiller
        pod-template-hash: '4008000092'
        release: '${PROMETHEUS_SERVICE_NAME}'
      name: '${PROMETHEUS_SERVICE_NAME}-844d4444f6'
  - apiVersion: apps/v1
    kind: ReplicaSet
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: prometheus
          component: '${PROMETHEUS_SERVICE_NAME}'
          pod-template-hash: '622102696'
          release: '${PROMETHEUS_SERVICE_NAME}'
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: prometheus
            chart: prometheus-8.11.4
            component: '${PROMETHEUS_SERVICE_NAME}'
            heritage: Tiller
            pod-template-hash: '622102696'
            release: '${PROMETHEUS_SERVICE_NAME}'
        spec:
          containers:
            - args:
                - '--volume-dir=/etc/config'
                - '--webhook-url=http://127.0.0.1:9090/-/reload'
              image: 'jimmidyson/configmap-reload:v0.2.2'
              imagePullPolicy: IfNotPresent
              name: '${PROMETHEUS_SERVICE_NAME}-configmap-reload'
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                  readOnly: true
            - args:
                - '--config.file=/etc/config/prometheus.yml'
                - '--storage.tsdb.path=/data'
                - '--web.console.libraries=/etc/prometheus/console_libraries'
                - '--web.console.templates=/etc/prometheus/consoles'
                - '--web.enable-lifecycle'
              image: 'prom/prometheus:v2.9.2'
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/healthy
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              name: '${PROMETHEUS_SERVICE_NAME}'
              ports:
                - containerPort: 9090
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /-/ready
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 30
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/config
                  name: config-volume
                - mountPath: /data
                  name: storage-volume
          dnsPolicy: ClusterFirst
          initContainers:
            - command:
                - chown
                - '-R'
                - '65534:65534'
                - /data
              image: 'busybox:latest'
              imagePullPolicy: IfNotPresent
              name: init-chown-data
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /data
                  name: storage-volume
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccount: deployer
          serviceAccountName: deployer
          terminationGracePeriodSeconds: 300
          volumes:
            - configMap:
                defaultMode: 420
                name: '${PROMETHEUS_SERVICE_NAME}'
              name: config-volume
            - name: storage-volume
              persistentVolumeClaim:
                claimName: '${PROMETHEUS_SERVICE_NAME}'
    metadata:
      annotations:
        deployment.kubernetes.io/desired-replicas: '1'
        deployment.kubernetes.io/max-replicas: '2'
        deployment.kubernetes.io/revision: '3'
        kubectl.kubernetes.io/last-applied-configuration: >
          {"apiVersion":"apps/v1","kind":"ReplicaSet","metadata":{"annotations":{"deployment.kubernetes.io/desired-replicas":"1","deployment.kubernetes.io/max-replicas":"2","deployment.kubernetes.io/revision":"3"},"generation":2,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"622102696","release":"${PROMETHEUS_SERVICE_NAME}"},"name":"${PROMETHEUS_SERVICE_NAME}-b66546bfb","namespace":"${NAMESPACE}"},"spec":{"replicas":0,"selector":{"matchLabels":{"app":"prometheus","component":"${PROMETHEUS_SERVICE_NAME}","pod-template-hash":"622102696","release":"${PROMETHEUS_SERVICE_NAME}"}},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","pod-template-hash":"622102696","release":"${PROMETHEUS_SERVICE_NAME}"}},"spec":{"containers":[{"args":["--volume-dir=/etc/config","--webhook-url=http://127.0.0.1:9090/-/reload"],"image":"jimmidyson/configmap-reload:v0.2.2","imagePullPolicy":"IfNotPresent","name":"${PROMETHEUS_SERVICE_NAME}-configmap-reload","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume","readOnly":true}]},{"args":["--config.file=/etc/config/prometheus.yml","--storage.tsdb.path=/data","--web.console.libraries=/etc/prometheus/console_libraries","--web.console.templates=/etc/prometheus/consoles","--web.enable-lifecycle"],"image":"prom/prometheus:v2.9.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/healthy","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"name":"${PROMETHEUS_SERVICE_NAME}","ports":[{"containerPort":9090,"protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/ready","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":30},"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/config","name":"config-volume"},{"mountPath":"/data","name":"storage-volume"}]}],"dnsPolicy":"ClusterFirst","initContainers":[{"command":["chown","-R","65534:65534","/data"],"image":"busybox:latest","imagePullPolicy":"IfNotPresent","name":"init-chown-data","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/data","name":"storage-volume"}]}],"restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"serviceAccount":"deployer","serviceAccountName":"deployer","terminationGracePeriodSeconds":300,"volumes":[{"configMap":{"defaultMode":420,"name":"${PROMETHEUS_SERVICE_NAME}"},"name":"config-volume"},{"name":"storage-volume","persistentVolumeClaim":{"claimName":"${PROMETHEUS_SERVICE_NAME}"}}]}}}}
      generation: 1
      labels:
        app: prometheus
        chart: prometheus-8.11.4
        heritage: Tiller
        pod-template-hash: '622102696'
      name: '${PROMETHEUS_SERVICE_NAME}-b66546bfb'
  - apiVersion: route.openshift.io/v1
    kind: Route
    spec:
      host: 'prometheus-${NAMESPACE}.${ROUTE_SUBDOMAIN}'
      port:
        targetPort: http
      to:
        kind: Service
        name: '${PROMETHEUS_SERVICE_NAME}'
        weight: 100
      wildcardPolicy: None
    metadata:
      annotations:
        kubectl.kubernetes.io/last-applied-configuration: >
          {"apiVersion":"route.openshift.io/v1","kind":"Route","metadata":{"annotations":{"openshift.io/host.generated":"true"},"labels":{"app":"prometheus"},"name":"prometheus","namespace":"${NAMESPACE}"},"spec":{"host":"prometheus-${NAMESPACE}.${ROUTE_SUBDOMAIN}","port":{"targetPort":"http"},"to":{"kind":"Service","name":"${PROMETHEUS_SERVICE_NAME}","weight":100},"wildcardPolicy":"None"}}
        openshift.io/host.generated: 'true'
      labels:
        app: prometheus
      name: prometheus
parameters:
  - description: The namespace this templated is deployed into.
    displayName: Namespace
    name: NAMESPACE
    value: openshift
  - description: The name of the Prometheus service to connect to.
    displayName: Prometheus Service Name
    name: PROMETHEUS_SERVICE_NAME
    required: true
    value: Prometheus
  - description: Default route subdomain
    displayName: Route subdomain
    name: ROUTE_SUBDOMAIN
    required: true
    value: pathfinder.gov.bc.ca
